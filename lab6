не получилось нормально залить, пришлось по старинке

1.1
#include <stdio.h>
 extern char **environ;
int main(int argc, char *argv[])
{
  char **p;
  int count = 0;
  for (p = environ; *p != NULL; p++) /* перебор всех элементов массива */
    count++;
  printf("Number of environment variables: %d\n", count);
  return 0;
}

1.2
#include <stdio.h>

extern char **environ;
int main(int argc, char *argv[]) {
    char **p;
    int cnt = 0;
    for (p = environ; *p != NULL; p++) 
      cnt++;
   printf("Number of environment variables: %d\n", cnt);
   printf("Number of arguments: %d\n", argc);

1.3
#include <stdio.h>

extern char **environ;
int main(int argc, char *argv[])
{
    char **p;
    int count = 1;
    for (p = environ; *p != NULL; p++){
        printf("%d - %s\n", count, *p);
        count++;
        if (count == 11)
            return 0;
    }
    return 0;
}

1.4
#include <stdio.h>

extern char **environ;
int main(int argc, char *argv[])
{
  char **elem;
  int counter = 0;
  int end;
  if(argc > 1) {
    sscanf(argv[1], "%d", &end);
  } else {
    return 0;
  }
  for (elem = environ; *elem != NULL  && counter < end; elem++) {
    printf("%s\n", *elem);
    counter++;
  }
  return 0;
}

2.1
#include <stdio.h>
#include <unistd.h>

int main(void){
    int pid = fork();

    if (pid == 0){
        printf("Message from child process\nPPID=%d PID=%d\n", getppid(), getpid());
    }else if(pid > 0){
        printf("Message from parent process\nChild PID=%d\n", pid);
    }
    return 0;
}

2.2(c)
#include <stdio.h>
#include <unistd.h>

int main() {
     int pid = fork();

      if (pid == 0) {
          sleep(55);
      } else {
        sleep(55);
      }
}

2.2(sh)
#!/bin/bash
gcc -o res 2_2.c && (./res &);
ps axjf

2.3(c)
#include <stdio.h>
#include <unistd.h>
int main() {
    int pid = 1;
    for (int i = 0; i < 10; i++){
        if (pid != 0)
            pid = fork();
        else
            sleep(55);
    }
    if (pid > 0)
        sleep(55);
}

2.3(sh)
#!/bin/bash
gcc -o processes task_2.3_processes.c
./processes & pstree | grep --color processes

2.4
#include <stdio.h>
#include <unistd.h>
int main(void) 
{  
    int i;
    pid_t pid;
 while(True) 
    {
        pid = fork();
        if (pid < 0) {
            printf("Maximum number of processes = %d\n", i);
            return;
        } else if (pid > 0) { i++; }
    }
}
